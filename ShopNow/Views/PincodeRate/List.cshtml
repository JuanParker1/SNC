@model ShopNow.ViewModels.PincodeRateListViewModel
@using GridMvc.Html
@{
    ViewBag.Title = "Pincode Rate";
}
<title>SNOWCH | PIN Code Rate List</title>
<link href="~/Content/Gridmvc.css" rel="stylesheet" />
<script src="~/Scripts/gridmvc.js"></script>
<link href="~/Content/switch.css" rel="stylesheet" />
<div class="container-fluid">
    <div class="row">
        <div class="col-md-4">
            <h5 class="text-success" style="letter-spacing:1px">PIN CODE DELIVERY RATE LIST</h5>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-body">
                    @Html.Grid(Model.List).Columns(columns =>
               {
                   columns.Add(b => b.Pincode).Titled("Pincode").Filterable(true).SetWidth(10);
                   columns.Add().Encoded(false).Sanitized(false)
              .RenderValueAs(b => new HtmlString
                       ("<select class='form-control select-type'><option disabled selected>Select Type</option><option value='0'>General</option><option value='1'>Special</option></select>")).Titled("Select Type").SetWidth(20);
                   columns.Add().Encoded(false).Sanitized(false)
              .RenderValueAs(b => new HtmlString
                       ("<select class='form-control select-tier'><option disabled selected>Select Tier</option><option value='1'>1<sup>st</sup> Tier</option><option value='2'>2<sup>nd</sup> Tier</option><option value='3'>3<sup>rd</sup> Tier</option></select>")).Titled("Select Tier").SetWidth(20);
                   columns.Add().Encoded(false).Sanitized(false)
              .RenderValueAs(b => new HtmlString
                       ("<select class='form-control select-remark'><option disabled selected>Select Remark</option><option value='Normal'>Normal</option><option value='Rain'>Rain</option><option value='Delivery Person Shortage'>Delivery Person Shortage</option><option value='Festival'>Festival</option><option value='Road Block'>Road Block</option></select>")).Titled("Remark").SetWidth(30);
                   columns.Add().Encoded(false).Sanitized(false)
              .RenderValueAs(b => new HtmlString
                       ("<input type='button' class='btn btn-sm btn-success btn-save' data-id="+b.Id+" data-pincode="+b.Pincode+" data-type="+b.Type+ " data-tier=" + b.Tier + " data-remark='" + b.Remarks + "' value='Update' />")).Titled("Action").Css("text-center").SetWidth(5);
                   columns.Add().Encoded(false).Sanitized(false)
             .RenderValueAs(s => new HtmlString
                      ("<label class='switch'> <input type='checkbox' value='" + s.Status + "' data-id='" + s.Id + "' class='check-active'><span class='slider round'></span></label>")).Titled("Active/Inactive").SetWidth(5);
               }).WithPaging(10).Sortable(true)
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/ValidateRequiredFields.js"></script>
    <script src="~/Scripts/sweetalert/sweetalert.min.js"></script>
    <link href="~/Content/sweetalert/sweetalert.css" rel="stylesheet" />
    <script>
        $(document).ready(function () {
            $('table tbody tr').each(function () {
                var $this = $(this).find(".btn-save");
                var id = $this.data('id');
                var type = $this.data('type');
                var tier = $this.data('tier');
                var remark = $this.data('remark');
                if (id != '0') {
                    $this.closest('tr').find('.select-type option[value=' + type + ']').prop("selected", true);
                    $this.closest('tr').find('.select-tier option[value=' + tier + ']').prop("selected", true);
                    $this.closest('tr').find('.select-remark option[value="' + remark + '"]').prop("selected", true);
                }
                var $thisactive = $(this).find(".check-active");
                if ($thisactive.val() == '0')
                    $thisactive.prop('checked', true);
                else
                    $thisactive.prop('checked', false);
            });

            $('.btn-save').on('click', function () {
                var tr = $(this).closest('tr');
                var type = tr.find('.select-type').val();
                var tier = tr.find('.select-tier').val();
                var remark = tr.find('.select-remark').val();
                var id = $(this).data('id');
                var pincode = $(this).data('pincode');
                if (type && tier && remark) {
                    $.post('/PincodeRate/AddUpdate', { id: id, type: type, tier: tier, remarks: remark, pincode: pincode }, function (data) {
                        if (data) {
                            swal('Success!', 'Save Successfully', 'success');
                            window.location.reload();
                        }
                        else
                            swal('Warning!', 'Something went wrong', 'warning');
                    });
                } else
                    swal('Warning!', 'All fields are required', 'warning');
            });

            $('.check-active').on('click', function () {
                var id = $(this).data('id');
                if ($(this).is(':checked') == true) {
                    $.post('/PincodeRate/UpdateActive', { id: id, status: 0 }, function () { });
                }
                else {
                    $.post('/PincodeRate/UpdateActive', { id: id, status: 2 }, function () { });
                }
                window.location.reload();
            });
        });
    </script>
}




