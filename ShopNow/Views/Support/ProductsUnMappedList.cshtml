@model ShopNow.ViewModels.ProductUnMappedList
@using GridMvc.Html
@{
    ViewBag.Title = "Products UnMapped List";
}
<title>ShopNow | @ViewBag.Title</title>
<link href="~/Content/Gridmvc.css" rel="stylesheet" />
<script src="~/Scripts/gridmvc.js"></script>

<div class="container-fluid">
    <form method="get" action="/Support/ProductsUnMappedList" class="my-3">
        <div class="row my-2  d-print-none">
            <div class="col-md-3">
                <h5 class="text-success" style="letter-spacing:1px">@ViewBag.Title</h5>
            </div>
            <div class="col-md-8">
                <div class="row">
                    <div class="col-md-6">
                        <select id="select-shop" class="form-control" name="ShopId">
                            @if (Model.ShopId != 0)
                            {
                                <option value="@Model.ShopId">@Model.ShopName</option>
                            }
                        </select>
                        <input type="hidden" name="ShopName" />
                    </div>
                    <div class="col-md-4">
                        <input type="submit" class="btn btn-info" value="Apply Filter" />
                        <a href="/Support/ProductsUnMappedList" class="btn btn-warning ml-2">Clear Filter</a>
                    </div>
                </div>
            </div>
            <div class="col-md-1 text-right">
                <div class="input-group">
                    <button id="btnPrint" class="btn btn-sm btn-secondary mr-2"><i class="fa fa-print fa-lg" aria-hidden="true"></i></button>
                    <button id="btnExport" class="btn btn-sm btn-secondary"><i class="fa fa-file-excel-o fa-lg" aria-hidden="true"></i></button>
                </div>
            </div>
        </div>
    </form>
    @if (Model.CountListItems.Count > 0)
    {
    <div class="card mb-3  d-print-none">
        <div class="card-body">
            <div class="d-flex justify-content-between">
                @foreach (var item in Model.CountListItems)
                {
                    <div><a href="/Support/ProductsUnMappedList?shopid=@item.ShopId&shopname=@item.ShopName">@item.ShopName - <b>@item.Count</b></a></div>
                }
            </div>
        </div>
    </div>
    }

    <div class="card mb-3">
        <div class="card-body">
            @Html.Grid(Model.ListItems).Columns(columns =>
        {
            columns.Add(b => b.MappedDate.Value).Format("{0:dd-MMM-yyyy}").Titled("Mapped Date").Filterable(true).SetWidth(10);
            columns.Add(b => b.Name).Titled("Name").Filterable(true).SetWidth(50);
            columns.Add(b => b.ShopName).Titled("Shop Name").Filterable(true).SetWidth(40);
            columns.Add(b => b.ItemId).Titled("Item id").Filterable(true).SetWidth(10);
            columns.Add(b => b.MenuPrice).Titled("Mrp").Filterable(true).SetWidth(10);
            columns.Add(b => b.SellingPrice).Titled("Price").Filterable(true).SetWidth(20);
            columns.Add(b => b.Quantity).Titled("Qty").Filterable(true).SetWidth(10);
            //   columns.Add()
            //.Encoded(false)
            //.Sanitized(false)
            //.RenderValueAs(b => new HtmlString
            //       ("<input type='button' class='btn btn-sm btn-success btn-update-active' value='Make Active' data-code="+b.Code+" />")).Titled("Action").Css("text-center").SetWidth(5);
        }).WithPaging(20).Sortable(true)
        </div>
    </div>
</div>
        @section Scripts
{
            <script src="~/Scripts/select2/js/select2.js"></script>
            <link href="~/Scripts/select2/css/select2.css" rel="stylesheet" />
            <link href="~/Content/select2/select2.custom.css" rel="stylesheet" />
            <script src="~/Scripts/sweetalert/sweetalert.min.js"></script>
            <link href="~/Content/sweetalert/sweetalert.css" rel="stylesheet" />
            <script src="~/Scripts/exporttoexcel/jquery.table2excel.js"></script>
            <script>
                $(document).ready(function () {
                    $('#select-shop').select2({
                        placeholder: "Search Shop",
                        ajax: {
                            url: "/Product/GetActiveShopSelect2",
                            width: '100%',
                            delay: 250,
                            dataType: 'json'
                        }
                    }).on('select2:select', function (e) {
                        $('input[name="ShopName"]').val(e.params.data.text);
                    });

                    //$('.btn-update-active').on('click', function () {
                    //    var tr = $(this).closest('tr');
                    //    var code = tr.find('.btn-update-active').data('code');
                    //    $.post('/Product/UpdateActive', { code: code }, function (data) {
                    //        if (data) {
                    //            swal('Success!', 'Updated Successfully', 'success');
                    //            window.location.reload();
                    //        }
                    //        else
                    //            swal('Warning!', 'Something went wrong', 'warning');
                    //    });
                    //});
                    $('#btnPrint').click(function () {
                        $('.container-fluid *').removeClass('card');
                        $('.container-fluid *').removeClass('card-body');
                        //$('.dataTables_info').addClass('d-none');
                        //$('.dataTables_paginate').addClass('d-none');
                        window.print();
                    });
                    $("#btnExport").click(function () {
                        $("table").table2excel({
                            name: "Worksheet Name",
                            filename: "UnMappingReport",
                            fileext: ".xls",
                            exclude_links: true,
                        });
                    });


                });
            </script>

        }

