@model ShopNow.ViewModels.OrderRatioViewModel
@{
    ViewBag.Title = "Order Ratios";
}
<title>ShopNow | @ViewBag.Title</title>
<link href="~/Content/switch.css" rel="stylesheet" />
<style>
    .tableFixHead {
        overflow: auto;
        height: 500px;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
            z-index: 1;
            background: #eee;
        }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 mx-auto">
            <div class="d-flex justify-content-between my-1">
                <h5 class="text-success text-uppercase" style="letter-spacing:1px;">@ViewBag.Title</h5>
            </div>
            <div class="card shadow">
                <div class="card-body">
                    <form method="get" action="/Cart/OrderRatios">
                        <div class="row mb-2">
                            <div class="col-md-2">
                                <select id="select-month-filter" class="form-control" name="MonthFilter">
                                    <option value="1">January</option>
                                    <option value="2">February</option>
                                    <option value="3">March</option>
                                    <option value="4">April</option>
                                    <option value="5">May</option>
                                    <option value="6">June</option>
                                    <option value="7">July</option>
                                    <option value="8">August</option>
                                    <option value="9">September</option>
                                    <option value="10">October</option>
                                    <option value="11">November</option>
                                    <option value="12">December</option>
                                </select>
                                <input type="hidden" name="MonthFilterName" />
                            </div>
                            <div class="col-md-2">
                                <select id="select-year-filter" class="form-control" name="YearFilter">
                                    @for (int year = 2020; year <= DateTime.Now.Year; year++)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <input type="submit" class="btn btn-info mr-3" value="Filter" />
                                <a href="/Cart/OrderRatios" class="btn btn-warning">Clear</a>
                            </div>
                        </div>
                    </form>
                    <div class="table-responsive tableFixHead">
                        <table class="table table-bordered" id="tbl-order-ratio">
                            <thead class="bg-light">
                                <tr>
                                    <th class="text-nowrap">Date</th>
                                    <th class="text-nowrap">Total Order</th>
                                    <th class="text-nowrap">Delivered Order</th>
                                    <th class="text-nowrap">Cancel Order</th>
                                    <th class="text-nowrap">New Order</th>
                                    <th class="text-nowrap">Repeat Order</th>
                                    <th class="text-nowrap">Total Repeat %</th>
                                    <th class="text-nowrap">Veg Total Order</th>
                                    <th class="text-nowrap">Veg Cancel Order</th>
                                    <th class="text-nowrap">Veg New Order</th>
                                    <th class="text-nowrap">Veg Repeat Order</th>
                                    <th class="text-nowrap">Veg Total Repeat %</th>
                                    <th class="text-nowrap">Res Total Order</th>
                                    <th class="text-nowrap">Res Cancel Order</th>
                                    <th class="text-nowrap">Res New Order</th>
                                    <th class="text-nowrap">Res Repeat Order</th>
                                    <th class="text-nowrap">Res Total Repeat %</th>
                                    <th class="text-nowrap">Med Total Order</th>
                                    <th class="text-nowrap">Med Cancel Order</th>
                                    <th class="text-nowrap">Med New Order</th>
                                    <th class="text-nowrap">Med Repeat Order</th>
                                    <th class="text-nowrap">Med Total Repeat %</th>
                                    <th class="text-nowrap">Customer Count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ListItems)
                                {

                                <tr class="@if (item.Date.Equals(DateTime.Now.ToString("dd-MMM-yyyy"))) { <text>text-primary</text> }">
                                    <td class="text-nowrap">@item.Date</td>
                                    <td>@item.TotalOrder</td>
                                    <td>@item.DeliveredOrder</td>
                                    <td>@item.CancelOrder</td>
                                    <td>@item.NewOrder</td>
                                    <td>@Math.Abs(item.TotalOrder - item.NewOrder - item.CancelOrder)</td>
                                    <td>
                                        @if (Math.Abs(item.TotalOrder - item.NewOrder - item.CancelOrder) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(item.TotalOrder - item.NewOrder - item.CancelOrder) / item.TotalOrder) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@item.VegTotal</td>
                                    <td>@item.VegCancelOrder</td>
                                    <td>@item.VegNewOrder</td>
                                    <td>@Math.Abs(item.VegTotal - item.VegNewOrder - item.VegCancelOrder)</td>
                                    <td>
                                        @if (Math.Abs(item.VegTotal - item.VegNewOrder - item.VegCancelOrder) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(item.VegTotal - item.VegNewOrder - item.VegCancelOrder) / item.VegTotal) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@item.ResTotal</td>
                                    <td>@item.ResCancelOrder</td>
                                    <td>@item.ResNewOrder</td>
                                    <td>@Math.Abs(item.ResTotal - item.ResNewOrder - item.ResCancelOrder)</td>
                                    <td>
                                        @if (Math.Abs(item.ResTotal - item.ResNewOrder - item.ResCancelOrder) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(item.ResTotal - item.ResNewOrder - item.ResCancelOrder) / item.ResTotal) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@item.MedicalTotal</td>
                                    <td>@item.MedicalCancelOrder</td>
                                    <td>@item.MedicalNewOrder</td>
                                    <td>@Math.Abs(item.MedicalTotal - item.MedicalNewOrder - item.MedicalCancelOrder)</td>
                                    <td>
                                        @if (Math.Abs(item.MedicalTotal - item.MedicalNewOrder - item.MedicalCancelOrder) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(item.MedicalTotal - item.MedicalNewOrder - item.MedicalCancelOrder) / item.MedicalTotal) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@item.CustomerCount</td>
                                </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr class="font-weight-bold">
                                    <td>Total</td>
                                    <td>@Model.ListItems.Sum(i => i.TotalOrder)</td>
                                    <td>@Model.ListItems.Sum(i => i.DeliveredOrder)</td>
                                    <td>@Model.ListItems.Sum(i => i.CancelOrder)</td>
                                    <td>@Model.ListItems.Sum(i => i.NewOrder)</td>
                                    <td>@Math.Abs(Model.ListItems.Sum(i => i.TotalOrder) - Model.ListItems.Sum(i => i.CancelOrder) - Model.ListItems.Sum(i => i.NewOrder))</td>
                                    <td>
                                        @if (Math.Abs(Model.ListItems.Sum(i => i.TotalOrder) - Model.ListItems.Sum(i => i.CancelOrder) - Model.ListItems.Sum(i => i.NewOrder)) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(Model.ListItems.Sum(i => i.TotalOrder) - Model.ListItems.Sum(i => i.NewOrder) - Model.ListItems.Sum(i => i.CancelOrder)) / Model.ListItems.Sum(i => i.TotalOrder)) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@Model.ListItems.Sum(i => i.VegTotal)</td>
                                    <td>@Model.ListItems.Sum(i => i.VegCancelOrder)</td>
                                    <td>@Model.ListItems.Sum(i => i.VegNewOrder)</td>
                                    <td>@Math.Abs(Model.ListItems.Sum(i => i.VegTotal) - Model.ListItems.Sum(i => i.VegNewOrder) - Model.ListItems.Sum(i => i.VegCancelOrder))</td>
                                    <td>
                                        @if (Math.Abs(Model.ListItems.Sum(i => i.VegTotal) - Model.ListItems.Sum(i => i.VegNewOrder) - Model.ListItems.Sum(i => i.VegCancelOrder)) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(Model.ListItems.Sum(i => i.VegTotal) - Model.ListItems.Sum(i => i.VegNewOrder) - Model.ListItems.Sum(i => i.VegCancelOrder)) / Model.ListItems.Sum(i => i.VegTotal)) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@Model.ListItems.Sum(i => i.ResTotal)</td>
                                    <td>@Model.ListItems.Sum(i => i.ResCancelOrder)</td>
                                    <td>@Model.ListItems.Sum(i => i.ResNewOrder)</td>
                                    <td>@Math.Abs(Model.ListItems.Sum(i => i.ResTotal) - Model.ListItems.Sum(i => i.ResNewOrder) - Model.ListItems.Sum(i => i.ResCancelOrder))</td>
                                    <td>
                                        @if (Math.Abs(Model.ListItems.Sum(i => i.ResTotal) - Model.ListItems.Sum(i => i.ResNewOrder) - Model.ListItems.Sum(i => i.ResCancelOrder)) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(Model.ListItems.Sum(i => i.ResTotal) - Model.ListItems.Sum(i => i.ResNewOrder) - Model.ListItems.Sum(i => i.ResCancelOrder)) / Model.ListItems.Sum(i => i.ResTotal)) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@Model.ListItems.Sum(i => i.MedicalTotal)</td>
                                    <td>@Model.ListItems.Sum(i => i.MedicalCancelOrder)</td>
                                    <td>@Model.ListItems.Sum(i => i.MedicalNewOrder)</td>
                                    <td>@Math.Abs(Model.ListItems.Sum(i => i.MedicalTotal) - Model.ListItems.Sum(i => i.MedicalNewOrder) - Model.ListItems.Sum(i => i.MedicalCancelOrder))</td>
                                    <td>
                                        @if (Math.Abs(Model.ListItems.Sum(i => i.MedicalTotal) - Model.ListItems.Sum(i => i.MedicalNewOrder) - Model.ListItems.Sum(i => i.MedicalCancelOrder)) != 0)
                                        {
                                            <span>@(Math.Round(Math.Abs((double)(Model.ListItems.Sum(i => i.MedicalTotal) - Model.ListItems.Sum(i => i.MedicalNewOrder) - Model.ListItems.Sum(i => i.MedicalCancelOrder)) / Model.ListItems.Sum(i => i.MedicalTotal)) * 100, 2))</span>
                                        }
                                        else
                                        {
                                            <span>0</span>
                                        }
                                    </td>
                                    <td>@Model.ListItems.Sum(i => i.CustomerCount)</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/sweetalert/sweetalert.min.js"></script>
    <link href="~/Content/sweetalert/sweetalert.css" rel="stylesheet" />
    <script src="~/Scripts/select2/js/select2.js"></script>
    <link href="~/Scripts/select2/css/select2.css" rel="stylesheet" />
    <link href="~/Content/select2/select2.custom.css" rel="stylesheet" />
    <script>
        $(document).ready(function () {

            $('select[name="MonthFilter"] option[value=@Model.MonthFilter]').prop('selected', true);
            $('select[name="YearFilter"] option[value=@Model.YearFilter]').prop('selected', true);

        });
    </script>
}