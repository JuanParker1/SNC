@model ShopNow.ViewModels.CartDetailsViewModel
@{
    ViewBag.Title = "Order Details";
    var mapkey = Session["googleMApkey"];
}
<title> ShopNow | @ViewBag.Title </title>
<style>
    /*#card {
        z-index: 0;
        background-color: #ECEFF1;
        padding-bottom: 20px;
        margin-top: 90px;
        margin-bottom: 90px;
        border-radius: 10px
    }*/

    .top {
        /*padding-top: 40px;*/
        padding-left: 13% !important;
        /*padding-right: 13% !important*/
        padding-right: 5% !important;
    }

    #progressbar {
        margin-bottom: 30px;
        overflow: hidden;
        color: #455A64;
        padding-left: 0px;
        margin-top: 30px
    }

        #progressbar li {
            list-style-type: none;
            font-size: 13px;
            /*width: 25%;*/
            width: 24%;
            float: left;
            position: relative;
            font-weight: 400
        }

        #progressbar .step0:before {
            font-family: FontAwesome;
            content: "\f10c";
            color: #fff
        }

        #progressbar li:before {
            width: 40px;
            height: 40px;
            line-height: 45px;
            display: block;
            font-size: 20px;
            background: #C5CAE9;
            border-radius: 50%;
            margin: auto;
            padding: 0px
        }

        #progressbar li:after {
            content: '';
            width: 100%;
            height: 12px;
            background: #C5CAE9;
            position: absolute;
            left: 0;
            top: 16px;
            z-index: -1
        }

        #progressbar li:last-child:after {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
            position: absolute;
            left: -50%
        }

        #progressbar li:nth-child(2):after,
        #progressbar li:nth-child(3):after {
            left: -50%
        }

        #progressbar li:first-child:after {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
            position: absolute;
            left: 50%
        }

        #progressbar li:last-child:after {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px
        }

        #progressbar li:first-child:after {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px
        }

        #progressbar li.active:before,
        #progressbar li.active:after {
            background: #28a745
        }

        #progressbar li.active:before {
            font-family: FontAwesome;
            content: "\f00c"
        }

    .icon {
        width: 60px;
        height: 60px;
        margin-right: 15px
    }

    .icon-content {
        padding-bottom: 20px
    }

    /*danger*/
    #progressbar li.active-danger:before,
    #progressbar li.active-danger:after {
        background: #dc3545;
    }

    #progressbar li.active-danger:before {
        font-family: FontAwesome;
        content: "\f00c"
    }

    @@media screen and (max-width: 992px) {
        .icon-content {
            width: 50%
        }
    }
</style>
<div class="px-3 mb-3">
    <div class="d-flex flex-row my-3">
        <div class="button-group ml-auto">
            <a href="~/Cart/List" class="ml-auto" target="_self"><span class="fa fa-bars"></span> New Order List</a>
        </div>
    </div>
</div>
<div class="container-fluid mb-4">
    <div class="row mt-3">
        <div class="col-md-12">
            @if (Model.IsPreorder == true)
            {
                <h2 class="text-primary text-center">----- Preorder -----</h2>
            }
            @if (Model.IsPickupDrop == true)
            {
                <h2 class="text-primary text-center">----- Pickup-Drop -----</h2>
            }
            @if (Model.Status != 7 && Model.Status != 9 && Model.Status != 10)
            {
                <div class="row d-flex justify-content-center">
                    <div class="col-12">
                        <ul id="progressbar" class="text-center">
                            @if (Model.Status == 2 || Model.Status == 3)
                            {
                                <li class="step0 active"></li>
                                <li class="step0"></li>
                                <li class="step0"></li>
                                <li class="step0"></li>
                            }
                            else if (Model.Status == 4 || Model.Status == 8)
                            {
                                <li class="step0 active"></li>
                                <li class="step0 active"></li>
                                <li class="step0"></li>
                                <li class="step0"></li>
                            }
                            else if (Model.Status == 5)
                            {
                                <li class="step0 active"></li>
                                <li class="step0 active"></li>
                                <li class="step0 active"></li>
                                <li class="step0"></li>
                            }
                            else
                            {
                                <li class="step0 active"></li>
                                <li class="step0 active"></li>
                                <li class="step0 active"></li>
                                <li class="step0 active"></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="row justify-content-between top">
                    <div class="row d-flex icon-content">
                        <img class="icon" src="https://i.imgur.com/9nnc9Et.png">
                        <div class="d-flex flex-column">
                            <p class="font-weight-bold mb-0">Order Pending</p>
                            <p>@Model.DateEncoded.ToString("dd-MMM-yyyy hh:mm tt")</p>
                        </div>
                    </div>
                    <div class="row d-flex icon-content">
                        <img class="icon" src="https://i.imgur.com/u1AzR7w.png">
                        <div class="d-flex flex-column">
                            <p class="font-weight-bold mb-0">Order Ready</p>
                            @if (Model.OrderReadyTime != null)
                            {
                                <p>@Model.OrderReadyTime.Value.ToString("dd-MMM-yyyy hh:mm tt")</p>
                            }
                            else if (Model.OrderPickupTime != null)
                            {
                                <p>@Model.OrderPickupTime.Value.ToString("dd-MMM-yyyy hh:mm tt")</p>
                            }
                        </div>
                    </div>
                    <div class="row d-flex icon-content">
                        <img class="icon" src="https://i.imgur.com/TkPm63y.png">
                        <div class="d-flex flex-column">
                            <p class="font-weight-bold mb-0">On the Way</p>
                            @if (Model.OrderPickupTime != null)
                            {
                                <p>@Model.OrderPickupTime.Value.ToString("dd-MMM-yyyy hh:mm tt")</p>
                            }
                        </div>
                    </div>
                    <div class="row d-flex icon-content">
                        <img class="icon" src="https://i.imgur.com/HdsziHP.png">
                        <div class="d-flex flex-column">
                            <p class="font-weight-bold mb-0">Order Delivered</p>
                            @if (Model.DeliveredTime != null)
                            {
                                <p>@Model.DeliveredTime.Value.ToString("dd-MMM-yyyy hh:mm tt")</p>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row d-flex justify-content-center" style="margin-left:20%;">
                    <div class="col-12">
                        <ul id="progressbar" class="text-center">
                            @if (Model.Status == 2 || Model.Status == 3)
                            {
                                <li class="step0 active-danger" style="width:34%;"></li>
                                <li class="step0" style="width:34%;"></li>
                            }
                            else
                            {
                                <li class="step0 active-danger" style="width:37%;"></li>
                                <li class="step0 active-danger" style="width:37%;"></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="row top" style="margin-left:22%;">
                    <div class="row d-flex icon-content">
                        <img class="icon" src="https://i.imgur.com/9nnc9Et.png">
                        <div class="d-flex flex-column">
                            <p class="font-weight-bold mb-0">Order Pending</p>
                            <p>@Model.DateEncoded.ToString("dd-MMM-yyyy hh:mm tt")</p>
                        </div>
                    </div>
                    <div class="row d-flex icon-content" style="margin-left:14rem;">
                        <img class="icon" src="https://i.imgur.com/u1AzR7w.png">
                        <div class="d-flex flex-column">
                            <p class="font-weight-bold mb-0">Order Cancelled</p>
                            @if (Model.DeliveredTime != null)
                            {
                                <p>@Model.DeliveredTime.Value.ToString("dd-MMM-yyyy hh:mm tt")</p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-body">
                    <label class="font-weight-bold text-muted"><u>Order Details:</u></label>
                    <div class="d-flex">
                        <label class="mr-3">Number:</label>
                        <b>
                            @Model.OrderNumber
                            @if (Model.IsPrescriptionOrder == true)
                            {<span>(Prescription)</span>}
                        </b>
                    </div>
                    <div class="d-flex">
                        <label class="mr-3">Date/Time:</label>
                        <b>@Model.DateEncoded.ToString("dd-MMM-yyyy hh:mm tt")</b>
                    </div>
                    <div class="d-flex">
                        <label class="mr-3">Total Amount:</label>
                        <b>₹@Math.Abs(Model.NetTotal - (Model.RefundAmount ?? 0)) - (@Model.PaymentMode)</b>
                        @*<a class="ml-2" id="btn-paymentmode-update" href="#modal-paymentmode-update" data-target="#modal-paymentmode-update" data-toggle="modal" data-id="@Model.OrderNumber"><i class="fa fa-edit"></i></a>*@
                    </div>
                    @if (Model.IsPreorder == true)
                    {
                        <div class="d-flex">
                            <label class="mr-3">Delivery Date/Time:</label>
                            <b>@Model.PreorderDeliveryDateTime.Value.ToString("dd-MMM-yyyy HH:mm tt")</b>
                        </div>
                    }
                    @if (Model.DeliveryBoyId != 0)
                    {
                        <div class="d-flex">
                            <label class="mr-3">Delivery Boy:</label>
                            <b>@Model.DeliveryBoyName</b>
                        </div>
                        <div class="d-flex">
                            <label class="mr-3">DeliveryBoy Ph No:</label>
                            <b>@Model.DeliveryBoyPhoneNumber</b>
                        </div>
                    }
                    @*@if (Model.PrescriptionImagePath != null)
                    {
                        <label>Prescription Image</label><br />
                        <div class="d-flex">
                            <img alt="Image" data-toggle="modal" data-target="#PrescriptionImageModal" class="img-thumbnail PrescriptionImage p-1" src="https://s3.ap-south-1.amazonaws.com/shopnowchat.com/Small/@Model.PrescriptionImagePath" onerror="this.src='/Images/No Photo.png'" style="width:45px;height:45px" />
                        </div>
                    }*@
                    @if (Model.ImagePathLists.Count() > 0)
                    {
                        <label>Prescription Image</label><br />
                        <div class="d-flex">
                            @foreach (var im in Model.ImagePathLists)
                            {
                                <img alt="Image" data-toggle="modal" data-target="#PrescriptionImageModal" class="img-thumbnail PrescriptionImage p-1" src="@im.ImagePath" onerror="this.src='/Images/noimage.png'" style="width:45px;height:45px" />
                            }
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.CustomerPrescriptionRemarks))
                    {
                        <div class="d-flex">
                            <label class="mr-3">Prescription Remarks:</label>
                            <b>@Model.CustomerPrescriptionRemarks</b>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100">
                <div class=" card-body">
                    <label class="font-weight-bold text-muted"><u>Shop Details:</u></label>
                    <div class="d-flex">
                        <label class="mr-3">Name:</label>
                        <b>@Model.ShopName</b>
                        <input type="hidden" name="ShopId" id="ShopId" value="@Model.ShopId" />
                        <input type="hidden" name="TotalPrice" id="TotalPrice" value="@Model.TotalPrice" />
                    </div>
                    <div class="d-flex">
                        <label class="mr-3">Ph Number:</label>
                        <b>@Model.ShopPhoneNumber</b>
                    </div>
                    <div class="d-flex">
                        <label class="mr-3">Owner Number:</label>
                        <b>@Model.ShopOwnerPhoneNumber</b>
                    </div>
                    <div class="d-flex">
                        <label class="mr-3">Address:</label>
                        <b>@Model.ShopAddress</b>
                    </div>
                    @if (Model.PickupDateTime != null)
                    {
                        <div class="d-flex">
                            <label class="mr-3">Pickup Date/Time:</label>
                            <b>@Model.PickupDateTime.Value.ToString("dd-MMM-yyyy HH:mm tt")</b>
                        </div>
                    }
                    @if (Model.DeliveryDate != null)
                    {
                        <div class="d-flex">
                            <label class="mr-3">Delivery Date:</label>
                            <b>@Model.DeliveryDate.Value.ToString("dd-MMM-yyyy")</b>
                            @if (Model.DeliverySlotType == 1)
                            {
                                <b class="ml-1">(08:00 AM to 10:00 AM)</b>
                            }
                            else if (Model.DeliverySlotType == 2)
                            {
                                <b class="ml-1">(10:00 AM to 12:00 PM)</b>
                            }
                            else if (Model.DeliverySlotType == 3)
                            {
                                <b class="ml-1">(12:00 PM to 02:00 PM)</b>
                            }
                            else if (Model.DeliverySlotType == 4)
                            {
                                <b class="ml-1">(02:00 PM to 04:00 PM)</b>
                            }
                            else if (Model.DeliverySlotType == 5)
                            {
                                <b class="ml-1">(04:00 PM to 06:00 PM)</b>
                            }
                            else if (Model.DeliverySlotType == 6)
                            {
                                <b class="ml-1">(06:00 PM to 08:00 PM)</b>
                            }
                            else if (Model.DeliverySlotType == 7)
                            {
                                <b class="ml-1">(08:00 PM to 10:00 PM)</b>
                            }
                            else
                            {
                                <b class="ml-1">N/A</b>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100">
                <div class=" card-body">
                    <label class="font-weight-bold text-muted"><u>Customer Details:</u></label>
                    <div class="d-flex">
                        <label class="mr-3">Name:</label>
                        <b>@Model.CustomerName</b>
                    </div>
                    <div class="d-flex">
                        <label class="mr-3">Ph Number:</label>
                        @if (Model.CustomerId != 0)
                        {
                            <a href="~/Customer/Details?id=@ShopNow.Helpers.AdminHelpers.ECodeInt(Model.CustomerId)"><span class="font-weight-bold"> @Model.CustomerPhoneNumber</span></a>
                        }
                        else
                        {
                            <span>@Model.CustomerPhoneNumber</span>
                        }
                    </div>
                    <div class="d-flex">
                        <label class="mr-3">Address:</label>
                        <a onclick="gotomap(@Model.Latitude,@Model.Longitude)" href="" target="_blank"> <span class="font-weight-bold"> @Model.DeliveryAddress</span></a>
                        @if (Model.IsPickupDrop == true)
                        {
                            <a href="#modal-update-deliveryaddress" data-target="#modal-update-deliveryaddress" data-toggle="modal" class="ml-3"><i class="fa fa-edit"></i></a>
                        }
                    </div>
                    <div class="d-flex flex-row-reverse">
                        @if (Model.IsPickupDrop == false)
                        {
                            <a href="#modal-deliveryaddress-update-deliveredorder" data-target="#modal-deliveryaddress-update-deliveredorder" data-toggle="modal" class="btn btn-primary ml-3">Update Address</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-9">
            <div class="card h-100">
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Remarks))
                    {
                        <div class="d-flex">
                            <label class="mr-3">Remarks:</label>
                            <b>@Model.Remarks</b>
                        </div>
                        <hr />
                    }

                    <label class="font-weight-bold text-muted"><u>Order Items:</u></label>
                    <table class="table table-borderless table-striped" id="tbl-items">
                        <thead>
                            <tr>
                                <th>No.</th>
                                @if (Model.IsPickupDrop == false)
                                {
                                <th></th>
                                }
                                <th>Product Name</th>
                                <th>Category Name</th>
                                <th>Qty</th>
                                <th>Price</th>
                                <th>Total</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ListItems)
                            {
                            <tr>
                                <td></td>
                                @if (Model.IsPickupDrop == false)
                                {
                                    <td><img src="@item.ImagePath" alt="Image" class="img-fluid productImages" data-toggle="modal" data-target="#myModal" style="width:50px;height:50px;" onerror="this.src='/Images/noimage.png'" /></td>
                                }
                                    <td>
                                        <b>@item.ProductName </b><br />
                                        @if (item.HasAddon == true)
                                        {
                                            foreach (var addon in item.AddonListItems)
                                            {
                                                if (item.AddonType == 1)
                                                {
                                                    if (item.UnitPrice == addon.PortionPrice)
                                                    {
                                                        <span>@addon.PortionName - @addon.PortionPrice</span><br />
                                                    }
                                                }
                                                else if (item.AddonType == 2)
                                                {
                                                    <span>@addon.AddonName - @addon.AddonPrice</span><br />
                                                }
                                                else if (item.AddonType == 3)
                                                {
                                                    if (addon.AddonPrice == 0)
                                                    {
                                                        <span>@addon.PortionName - @addon.PortionPrice</span><br />
                                                    }
                                                    else
                                                    {
                                                        <span>@addon.AddonName - @addon.AddonPrice</span><br />
                                                    }
                                                }
                                                else if (item.AddonType == 4)
                                                {
                                                    if (addon.AddonPrice == 0 && addon.PortionPrice == 0)
                                                    {
                                                        <span>@addon.CrustName</span><br />
                                                    }
                                                    else if (addon.PortionPrice != 0)
                                                    {
                                                        <span>@addon.PortionName - @addon.PortionPrice</span><br />
                                                    }
                                                    else
                                                    {
                                                        <span>@addon.AddonName - @addon.AddonPrice</span><br />
                                                    }
                                                }
                                            }
                                        }
                                    </td>
                                    <td>@item.CategoryName</td>
                                    <td>@item.Quantity</td>
                                    <td>₹@item.UnitPrice</td>
                                    <td>₹@item.Price</td>
                                    <td>
                                        <a class="btn-item-update" href="#modal-item-update" data-target="#modal-item-update" data-toggle="modal" data-id="@item.Id" data-product="@item.ProductName" data-category="@item.CategoryName" data-quantity="@item.Quantity" data-unitprice="@item.UnitPrice" data-remark="@item.UpdateRemarks"><i class="fa fa-edit"></i></a>
                                        @if (!string.IsNullOrEmpty(item.UpdateRemarks))
                                        {<i class="fa fa-info-circle ml-3 text-danger" data-html="true" data-toggle="tooltip" title="<p class='mb-0'>@item.UpdateRemarks</p><small>@item.UpdatedBy (@item.UpdatedTime.Value.ToString("dd-MMM-yyyy HH:mm tt"))</small>"></i>}
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="3">Total</th>
                                @if (Model.IsPickupDrop == false)
                                {
                                    <th></th>
                                }
                                    <th>@Model.ListItems.Sum(i => i.Quantity)</th>
                                    <th>₹@Model.ListItems.Sum(i => i.UnitPrice)</th>
                                    <th>₹@Model.ListItems.Sum(i => i.Price)</th>
                                    <th></th>
                                </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-body">
                    <label class="font-weight-bold text-muted"><u>Order Status:</u></label>
                    @switch (Model.Status)
                    {
                        case 2:
                            <h5 class="font-weight-bold text-primary text-center mb-3">Order Pending</h5>
                            <button type="button" class="btn btn-sm btn-block btn-success mb-3" id="Accept">Accept</button>
                            <button type="button" class="btn btn-sm btn-block btn-danger" data-toggle="modal" data-target="#modal-add-cancel-remark">Cancel</button>
                            break;
                        case 3:
                            <h5 class="font-weight-bold text-primary text-center mb-3">Order is being Prepared</h5>
                            <button type="button" class="btn btn-sm btn-block btn-success" id="Assign">Assign Delivery Boy</button>
                            break;
                        case 4:
                            if (Model.DeliveryBoyId != 0 && Model.DeliveryBoyOnWork == 0)
                            {
                                <h5 class="font-weight-bold text-center text-warning mb-3">Assigned for Delivery</h5>
                                <a href="/Cart/DeliveryBoyAccept?OrderNumber=@Model.OrderNumber&id=@Model.Id" class="btn btn-sm btn-info btn-block">Delivery Boy Accept</a>
                            }
                            else if (Model.DeliveryBoyId != 0 && Model.DeliveryBoyOnWork == 1)
                            {
                                <h5 class="font-weight-bold text-warning text-center mb-3">Waiting For Pickup</h5>
                                <a href="/Cart/DeliveryBoyPickup?OrderNumber=@Model.OrderNumber&id=@Model.Id" class="btn btn-sm btn-info btn-block">Delivery Boy Pickup</a>
                            }
                            else
                            {
                                <h5 class="font-weight-bold text-warning text-center mb-3">Assigned for Delivery</h5>
                            }
                            break;
                        case 5:
                            <h5 class="font-weight-bold text-warning text-center mb-3">On the Way to Delivery</h5>
                            if (Model.IsPickupDrop == true)
                            {
                                <a href="#modal-update-address" data-target="#modal-update-address" data-toggle="modal" class="btn btn-sm btn-info btn-block mb-3">Mark as Delivered</a>
                            }
                            else
                            {
                                <a href="/Cart/MarkAsDelivered?OrderNumber=@Model.OrderNumber&id=@Model.Id" class="btn btn-sm btn-info btn-block mb-3">Mark as Delivered</a>
                            }
                            <a href="/Cart/CustomerNotPickUp?OrderNumber=@Model.OrderNumber&id=@Model.Id" class="btn btn-sm btn-warning btn-block text-white">Customer Not Pickup</a>
                            break;
                        case 6:
                            <h5 class="font-weight-bold text-success text-center mb-3">Order Delivered</h5>
                            if (Model.PenaltyAmount <= 0)
                            {
                                <a href="#modal-add-penalty-charge" data-target="#modal-add-penalty-charge" data-toggle="modal" class="btn btn-sm btn-block btn-info text-white mb-3">Add Penalty</a>
                            }
                            if (Model.WaitingCharge <= 0)
                            {
                                <a href="#modal-add-waiting-charge" data-target="#modal-add-waiting-charge" data-toggle="modal" class="btn btn-sm btn-block btn-warning text-white">Add Waiting Charge</a>
                            }
                            break;
                        case 7:
                            <h5 class="font-weight-bold text-danger text-center mb-3">Order Cancelled</h5>
                            break;
                        case 8:
                            <h5 class="font-weight-bold text-success text-center mb-3">Order is Ready</h5>
                            if (Model.DeliveryBoyId == 0)
                            {
                                <button type="button" class="btn btn-sm btn-block btn-success" id="Assign">Assign Delivery Boy</button>
                            }
                            break;
                        case 9:
                            <h5 class="font-weight-bold text-danger text-center mb-3">Order Cancelled By Customer</h5>
                            break;
                        case 10:
                            <h5 class="font-weight-bold text-danger text-center mb-3">Customer Not Responed/Picked Up</h5>
                            if (Model.PenaltyAmount <= 0)
                            {
                                <a href="#modal-add-penalty-charge" data-target="#modal-add-penalty-charge" data-toggle="modal" class="btn btn-sm btn-block btn-info text-white mb-3">Add Penalty</a>
                            }
                            break;
                    }
                    <a href="~/Cart/PickupSlip?OrderNumber=@Model.OrderNumber&id=@ShopNow.Helpers.AdminHelpers.ECodeLong(Model.Id)" class="btn btn-sm btn-secondary btn-block mt-3"><span><i class="fa fa-print mr-1" aria-hidden="true"></i></span> Pickup Slip</a>
                    <label class="font-weight-bold text-muted mt-3"><u>Amount Details:</u></label>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Items Total:</label>
                        <b>
                            @if (Model.ListItems.Sum(i => i.Price) == 0)
                            {
                                <span>@Model.TotalPrice.ToString("#,#,0.00")</span>
                            }
                            else
                            {
                                <span>@Model.ListItems.Sum(i => i.Price).ToString("#,#,0.00")</span>
                            }
                        </b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Packing Charge:</label>
                        <b>₹@Model.Packingcharge</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Convenience Charge:</label>
                        <b>₹@Model.Convinenientcharge</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Delivery Charge:</label>
                        <b>₹@Model.NetDeliveryCharge.ToString("#,#,0.00")</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Offer Amount:</label>
                        <b>₹@Model.OfferAmount</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Wallet Amount Used:</label>
                        <b>₹@Model.WalletAmount</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Tips Amount:</label>
                        <b>₹@Model.TipsAmount</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Grand Total:</label>
                        <b>₹@Model.NetTotal</b>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between" data-toggle="tooltip" title="@Model.RefundRemark">
                        <label class="mr-1">
                            Refund Amount:
                            @if (Model.RefundAmount == 0 || Model.RefundAmount == null)
                            {
                                <a href="#modal-refund" data-target="#modal-refund" data-toggle="modal"><i class="fa fa-plus-circle"></i></a>
                            }
                            else
                            {
                                <a href="#modal-refund-update" data-target="#modal-refund-update" data-toggle="modal"><i class="fa fa-edit"></i></a>
                            }
                        </label>
                        <b>₹@(Model.RefundAmount ?? 0)</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Total Paid:</label>
                        <b>₹@Math.Abs(Model.NetTotal - (Model.RefundAmount ?? 0))</b>
                    </div>
                    <hr />
                    <div class="d-flex justify-content-between">
                        <label class="mr-1">
                            Shop Payment:
                            <a href="#modal-actualShopPayment-update" data-target="#modal-actualShopPayment-update" data-toggle="modal"><i class="fa fa-edit"></i></a>
                        </label>
                        <b>₹@Model.TotalShopPrice</b>
                    </div>
                    <div class="d-flex justify-content-between">
                        <label class="mr-3">Price Difference:</label>
                        <b>₹@(Model.TotalPrice - (Model.RefundAmount ?? 0) - (Model.TotalShopPrice == 0 ? Model.TotalPrice : Model.TotalShopPrice))</b>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" value="@Model.OrderNumber" id="hidden-ordernumber" />
<input type="hidden" value="@Model.CustomerId" id="hidden-customerid" />
<input type="hidden" value="@Model.Status" id="hidden-status" />

<div id="PrescriptionImageModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Prescription Image</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="row" id="print-Prescription">
                    <img class="modal-content img-fluid w-100" style="height:400px;" id="PresImage" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary ml-2" id="btnPrint" onclick="printDiv('print-Prescription')">Print</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="myModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button class="close text-danger mb-2" data-dismiss="modal">&times;</button>
                @*<a href="~/Home/ImageDenied">*@
                <img class="modal-content img-fluid w-100" style="height:400px;" id="myImage" />
                @* </a>*@
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-add-penalty-charge" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/AddPenaltyCharge">
                    <input type="hidden" name="OrderId" value="@Model.Id" />
                    <h5>Add Penalty Charge</h5>
                    <div class="form-group">
                        <label>Amount</label>
                        <input class="form-control" type="number" name="Amount" required />
                    </div>
                    <div class="form-group">
                        <label>Remarks</label>
                        <input class="form-control" type="text" name="Remark" required />
                    </div>
                    <div class="text-right">
                        <button type="submit" class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-add-waiting-charge" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/AddWaitingCharge">
                    <input type="hidden" name="OrderId" value="@Model.Id" />
                    <h5>Add Waiting Charge</h5>
                    <div class="form-group">
                        <label>Amount</label>
                        <input class="form-control" type="number" name="Amount" required />
                    </div>
                    <div class="form-group">
                        <label>Remarks</label>
                        <input class="form-control" type="text" name="Remark" required />
                    </div>
                    <div class="text-right">
                        <button type="submit" class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-refund" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/AddRefundFromShopOrderProcessing">
                    <input type="hidden" name="Id" value="@Model.Id" />
                    <input type="hidden" name="Redirection" value="5" />
                    <h5>Add Refund</h5>
                    <div class="form-group">
                        <label>Amount</label>
                        <input class="form-control" type="number" name="Amount" required />
                    </div>
                    <div class="form-group">
                        <label>Remarks</label>
                        <input class="form-control" type="text" name="Remark" required />
                    </div>
                    <div class="text-right">
                        <button class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-refund-update" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/UpdateRefundAmount">
                    <input type="hidden" name="Id" value="@Model.Id" />
                    <h5>Update Refund</h5>
                    <div class="form-group">
                        <label>Amount</label>
                        <input class="form-control" type="number" name="Amount" value="@Model.RefundAmount" />
                    </div>
                    <div class="form-group">
                        <label>Remarks</label>
                        <input class="form-control" type="text" name="Remark" value="@Model.RefundRemark" />
                    </div>
                    <div class="text-right">
                        <button class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-item-update" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/UpdateItem">
                    <input type="hidden" name="Id" id="item-id" />
                    <input type="hidden" name="OrderId" value="@Model.Id" />
                    <h5>Update Item</h5><hr />
                    <h6 id="text-product" class="font-weight-bold"></h6>
                    <label>Category:</label> <small id="text-category" class="font-weight-bold"></small>
                    <div class="d-flex form-group mt-3">
                        <label class="col-form-label mr-3">Quantity:</label>
                        <input class="form-control w-50" type="number" min="1" name="Quantity" id="input-quantity" />
                    </div>
                    <div class="form-group d-flex">
                        <label class="col-form-label mr-2">Unit Price:</label>
                        <input class="form-control w-50" type="number" min="1" step="any" name="UnitPrice" id="input-unitprice" />
                    </div>
                    <span id="warning-text" class="text-danger"></span>
                    <div class="form-group">
                        <label class="col-form-label">Remarks:</label>
                        <textarea class="form-control" name="Remarks" id="input-remark" required></textarea>
                    </div>
                    <div class="text-right">
                        <button class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@*<div class="modal fade" id="modal-paymentmode-update" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-body">
                    <form method="get" action="/Cart/UpdatePaymentMode">
                        <input type="hidden" name="Id" value="@Model.Id" />
                        <h5>Update PaymentType</h5>
                        <div class="form-group row">
                            <div class="col-md-12">
                                <select name="PaymentType" id="PaymentType" class="form-control">
                                    <option value="0">Select Payment</option>
                                    <option value="1">Online Payment</option>
                                    <option value="2">Cash On Hand</option>
                                </select>
                                <input type="hidden" name="OrderNo" id="OrderNo" />
                            </div>
                        </div>
                        <div class="text-right">
                            <button class="btn btn-sm btn-success mr-3">Submit</button>
                            <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>*@

<div class="modal fade" id="modal-actualShopPayment-update" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/UpdateShopPayment">
                    <input type="hidden" name="Id" value="@Model.Id" />
                    <h5>Update Shop Payment</h5>
                    <div class="form-group">
                        <label>Amount</label>
                        <input class="form-control" type="number" name="Amount" value="@Model.TotalShopPrice" />
                    </div>
                    <div class="text-right">
                        <button class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-update-address" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/MarkAsDelivered">
                    <input type="hidden" name="Id" value="@Model.Id" />
                    <input type="hidden" name="OrderNumber" value="@Model.OrderNumber" />
                    <h5>Update Address</h5>
                    <div class="form-group">
                        <label>Address</label>
                        <textarea class="form-control" name="Address" required>@Model.DeliveryAddress</textarea>
                    </div>
                    <div class="text-right">
                        <button class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-update-deliveryaddress" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/UpdateDeliveryAddress">
                    <input type="hidden" name="OrderId" value="@Model.Id" />
                    <h5>Update Delivery Address</h5>
                    <div class="form-group">
                        <label>Address</label>
                        <textarea id="delivery-address" class="form-control" name="Address" onchange="GetLatLong();" required>@Model.DeliveryAddress</textarea>
                    </div>
                    <div class="form-group">
                        <label>Latitude</label>
                        <input type="text" class="form-control" name="Latitude" value="@Model.Latitude" />
                    </div>
                    <div class="form-group">
                        <label>Longitude</label>
                        <input type="text" class="form-control" name="Longitude" value="@Model.Longitude" />
                    </div>
                    <div class="form-group">
                        <label>Distance(Km)</label>
                        <input type="text" class="form-control" name="Distance" value="@Model.Distance" />
                    </div>
                    <div class="form-group">
                        <label>Delivery Charge</label>
                        <input type="text" class="form-control" name="DeliveryCharge" value="@Model.NetDeliveryCharge" />
                    </div>
                    <div class="text-right">
                        <button class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-add-cancel-remark" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <h5>Add Cancel Remarks</h5>
                <div class="from-group mt-3">
                    <label class="text-secondary">Status</label>
                    <select class="form-control" name="CancelStatus" id="CancelStatus" required>
                        <option value="">Select Cancel Status</option>
                        <option value="7">Shop Cancelled</option>
                        <option value="10">Customer Not PickUp</option>
                    </select>
                </div>
                <div class="form-group mt-3">
                    <label class="text-secondary">Remarks</label>
                    <textarea class="form-control" type="text" name="CancelledRemark" id="CancelledRemark" required></textarea>
                </div>
                <div class="text-right">
                    <button id="btn-cancel" type="button" class="btn btn-sm btn-success mr-3">Submit</button>
                    <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal-deliveryaddress-update-deliveredorder" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <form method="get" action="/Cart/UpdateDeliveredOrderDeliveryAddress">
                    <input type="hidden" name="UpdateOrderId" value="@Model.Id" />
                    <input type="hidden" name="ShopLatitude" value="@Model.ShopLatitude" />
                    <input type="hidden" name="ShopLongitude" value="@Model.ShopLongitude" />
                    <h5>Update Delivery Address</h5>
                    <div class="row form-group">
                        <div class="col-md-12">
                            <label>Address</label>
                            <textarea id="deliveredorder-delivery-address" class="form-control" name="UpdateAddress" onchange="GetUpdateLatLong();" required>@Model.DeliveryAddress</textarea>
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-md-6">
                            <label>Latitude</label>
                            <input type="text" class="form-control" name="UpdateLatitude" value="@Model.Latitude" />
                        </div>
                        <div class="col-md-6">
                            <label>Longitude</label>
                            <input type="text" class="form-control" name="UpdateLongitude" value="@Model.Longitude" />
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-md-6">
                            <label>Distance(Km)</label>
                            <input type="text" class="form-control" name="UpdateDistance" id="UpdateDistance" value="@Model.Distance" />
                        </div>
                        <div class="col-md-6">
                            <label>Delivery Charge</label>
                            <input type="text" class="form-control" name="UpdateDeliveryCharge" value="@Model.DeliveryCharge" />
                        </div>
                    </div>
                    <div class="row form-group">
                        <div class="col-md-6">
                            <label>Shop Delivery Discount</label>
                            <input type="text" class="form-control" name="UpdateShopDeliveryDiscount" value="@Model.ShopDeliveryDiscount" />
                        </div>
                        <div class="col-md-6">
                            <label>Net Delivery Charge</label>
                            <input type="text" class="form-control" name="UpdateNetDeliveryCharge" value="@Model.NetDeliveryCharge" />
                        </div>
                    </div>
                    <div class="text-right">
                        <button class="btn btn-sm btn-success mr-3">Submit</button>
                        <button class="btn btn-sm btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/sweetalert/sweetalert.min.js"></script>
    <link href="~/Content/sweetalert/sweetalert.css" rel="stylesheet" />
    <script src="https://maps.googleapis.com/maps/api/js?key=@mapkey&libraries=places"     async defer></script>
    <script>
        function printDiv(divName) {
            var printContents = document.getElementById(divName).innerHTML;
            w = window.open();
            w.document.write(printContents);
            w.print();
            w.close();
        }
        function gotomap(lat, lng) {
            window.open('https://www.google.com/maps/place/' + lat + ',' + lng, "_blank");
        }
        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

            var t = $('#tbl-items').DataTable({
                "dom": "<'row'<'col-sm-6'f>>" +
                    "<'row'<'col-sm-5'i><'col-sm-3'l><'col-sm-4'p>>" +
                    "<'row'<'col-sm-12'tr>>",
                "bPaginate": false,
                "scrollY": 400,
                "paging": true,
                "lengthMenu": [[10, 20, 50, 100, -1], [10, 20, 50, 100, "ALL"]],
                "pageLength": 20,
                initComplete: function (settings, json) {
                    $('.index input').remove();
                    $('.action-btn input').remove();
                    $('.dataTables_filter input').appendTo('.data-search');
                    $('.dataTables_filter label').remove();
                    $('.data-search input').attr('placeholder', 'Quick Search');
                    $('.data-search input').addClass('form-control');
                    $('.data-search input').removeClass('form-control-sm');
                },
            });

            t.on('order.dt search.dt', function () {
                t.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();

            var ordernumber = $("#hidden-ordernumber").val();
            var customerId = $('#hidden-customerid').val();
            $("#Accept").click(function () {
                $.getJSON("/Cart/Accept?OrderNumber=" + ordernumber + "&customerId=" + customerId, function (data) {
                    if (data.message != null) {
                        swal({
                            title: data.message,
                            text: "",
                            type: "success"
                        }, function () {
                            window.location.href = "/Cart/List";
                        });
                    }
                });
            });

            var modal = document.getElementById('myModal');
            var img = document.getElementsByClassName('productImages');
            var modalImg = document.getElementById("myImage");
            $(img).click(function () {
                modal.style.display = "block";
                modalImg.src = this.src.replace("/Small/", "/Large/");
                if (this.src == "") {
                    $('#myModal').hide();
                }
                else {
                    $('#myModal').modal('show');
                }
            });

            var modal1 = document.getElementById('PrescriptionImageModal');
            var img1 = document.getElementsByClassName('PrescriptionImage');
            var modalImg1 = document.getElementById("PresImage");
            $(img1).click(function () {
                modal1.style.display = "block";
                modalImg1.src = this.src.replace("/Small/", "/Large/");
                if (this.src == "") {
                    $('#PrescriptionImageModal').hide();
                }
                else {
                    $('#PrescriptionImageModal').modal1('show');
                }
            });

            //$("#Cancel").click(function () {
            //    var ordernumber = $("#hidden-ordernumber").val();
            //    var customerId = $('#hidden-customerid').val();
            //    var status = $('#hidden-status').val();
            //    $.getJSON("/Cart/Cancel?OrderNumber=" + ordernumber + "&customerId=" + customerId + "&status=" + status, function (data) {
            //        if (data.message != null) {
            //            swal({
            //                title: "Order Cancelled",
            //                text: data.message,
            //                type: "error"
            //            }, function () {
            //                window.location.href = "/Cart/List";
            //            });
            //        }
            //    });
            //});

            $("#Assign").click(function () {
                var ordernumber = $("#hidden-ordernumber").val();
                window.location.href = "/Cart/AssignDeliveryBoy?OrderNumber=" + ordernumber;
            });

            $("#tbl-items").on('click', '.btn-item-update', function () {
                $('#item-id').val($(this).data('id'));
                $('#text-product').text($(this).data('product'));
                $('#text-category').text($(this).data('category'));
                $('#input-quantity').val($(this).data('quantity'));
                $('#input-unitprice').val($(this).data('unitprice'));
                $('#input-unitprice').data('unitprice',$(this).data('unitprice'));
                $('#input-remark').val($(this).data('remark'));
                $('#modal-item-update').modal('show');
            });

            $('#input-unitprice').on('change', function () {
                var price = parseFloat($(this).val());
                var originalprice = parseFloat($(this).data('unitprice'));
                if (price < originalprice) {
                    $(this).val(originalprice);
                    $('#warning-text').text('Price should not be less than Original price');
                } else {
                    $('#warning-text').text('');
                }
            });

            $('#modal-item-update').on('hidden.bs.modal', function () {
                $('#warning-text').text('');
            });

            $("#btn-cancel").click(function () {
                var ordernumber = $("#hidden-ordernumber").val();
                var customerId = $('#hidden-customerid').val();
                var status = $('#CancelStatus').val();
                var remark = $('#CancelledRemark').val();
                $.getJSON("/Cart/Cancel?OrderNumber=" + ordernumber + "&customerId=" + customerId + "&status=" + status + "&remark=" + remark, function (data) {
                    if (data.message != null) {
                        swal({
                            title: data.message,
                            text: "",
                            type: "error"
                        }, function () {
                            window.location.reload();
                        });
                    }
                });
            });

            //$("#btn-paymentmode-update").on('click', function () {
            //    $('#OrderNo').val($(this).data('id'));
            //    $('#modal-paymentmode-update').modal('show');
            //});
        });

        var geocoder;
            function GetLatLong() {
                geocoder = new google.maps.Geocoder();
                var address = document.getElementById('delivery-address').value;
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status == 'OK') {
                        $('input[name="Latitude"]').val(results[0].geometry.location.lat());
                        $('input[name="Longitude"]').val(results[0].geometry.location.lng());
                        getDeliveryCharge();
                    }
                });
            }

            function getDeliveryCharge() {
                var shopid = $('#ShopId').val();
                var itemTotal = parseFloat($('#TotalPrice').val());
                $.ajax({
                    url: '/Service/GetLocationDetails?sourceLatitude=' + $('[name="ShopLatitude"]').val() + '&sourceLongitude=' + $('[name="ShopLongitude"]').val() + '&destinationLatitude=' + $('input[name="Latitude"]').val() + '&destinationLongitude=' + $('input[name="Longitude"]').val() + '',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        if (data) {
                            $('input[name="Distance"]').val(data.Distance.toFixed(2));
                            var distance = data.Distance;
                            $.getJSON("/CustomerPrescription/GetShopCharge", { shopid: shopid, itemTotal: itemTotal, customerid: 0, totalSize: 0, totalWeight: 0, distance: distance }, function (data) {
                                if (data != null) {
                                    $('input[name="DeliveryCharge"]').val(data.GrossDeliveryCharge.toFixed(2));
                                }
                            });
                        } else {
                            var service = new google.maps.DistanceMatrixService();
                            const origin = { lat: parseFloat($('[name="ShopLatitude"]').val()), lng: parseFloat($('[name="ShopLongitude"]').val()) };
                            const dest = { lat: parseFloat($('[name="Latitude"]').val()), lng: parseFloat($('[name="Longitude"]').val()) };
                            const request = {
                                origins: [origin],
                                destinations: [dest],
                                travelMode: google.maps.TravelMode.DRIVING,
                            };
                            service.getDistanceMatrix(request).then((response) => {
                                var distance = (response.rows[0].elements[0].distance.value / 1000).toFixed(2);
                                var duration = (response.rows[0].elements[0].duration.value / 60).toFixed(2);
                                $('input[name="Distance"]').val(distance);
                                saveLocation(origin.lat, origin.lng, dest.lat, dest.lng, distance, duration);
                                var distance = distance;
                                $.getJSON("/CustomerPrescription/GetShopCharge", { shopid: shopid, itemTotal: itemTotal, customerid: 0, totalSize: 0, totalWeight: 0, distance: distance }, function (data) {
                                    if (data != null) {
                                        $('input[name="DeliveryCharge"]').val(data.GrossDeliveryCharge.toFixed(2));
                                    }
                                });

                            });
                        }
                    },
                    error: function () { alert('Something went wrong, try again later!'); },
                });
            }

       
        // Update Delivered Order Delivery Address

        var geocoder1;
        function GetUpdateLatLong() {
            geocoder1 = new google.maps.Geocoder();
            var address = document.getElementById('deliveredorder-delivery-address').value;
            geocoder1.geocode({ 'address': address }, function (results, status) {
                if (status == 'OK') {
                    $('input[name="UpdateLatitude"]').val(results[0].geometry.location.lat());
                    $('input[name="UpdateLongitude"]').val(results[0].geometry.location.lng());
                    calculateRoadDistance();
                }
            });
        }

        // Calculate Road Distance
        function calculateRoadDistance() {
            var shopid = $('#ShopId').val();
            var itemTotal = parseFloat($('#TotalPrice').val());
            $.ajax({
                url: '/Service/GetLocationDetails?sourceLatitude=' + $('[name="ShopLatitude"]').val() + '&sourceLongitude=' + $('[name="ShopLongitude"]').val() + '&destinationLatitude=' + $('input[name="UpdateLatitude"]').val() + '&destinationLongitude=' + $('input[name="UpdateLongitude"]').val() + '',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data) {
                        $('#UpdateDistance').val(data.Distance);
                        var distance = data.Distance;
                        $.getJSON("/CustomerPrescription/GetShopCharge", { shopid: shopid, itemTotal: itemTotal, customerid: 0, totalSize: 0, totalWeight: 0, distance: distance }, function (data) {
                            if (data != null) {
                                $('[name="UpdateDeliveryCharge"]').val(data.GrossDeliveryCharge.toFixed(2));
                                $('[name="UpdateShopDeliveryDiscount"]').val(data.ShopDeliveryDiscount.toFixed(2));
                                $('[name="UpdateNetDeliveryCharge"]').val(data.NetDeliveryCharge.toFixed(2));
                            }
                        });
                    } else {
                        var service = new google.maps.DistanceMatrixService();
                        const origin = { lat: parseFloat($('[name="ShopLatitude"]').val()), lng: parseFloat($('[name="ShopLongitude"]').val()) };
                        const dest = { lat: parseFloat($('[name="UpdateLatitude"]').val()), lng: parseFloat($('[name="UpdateLongitude"]').val()) };
                        const request = {
                            origins: [origin],
                            destinations: [dest],
                            travelMode: google.maps.TravelMode.DRIVING,
                        };
                        service.getDistanceMatrix(request).then((response) => {
                            var distance = (response.rows[0].elements[0].distance.value / 1000).toFixed(2);
                            var duration = (response.rows[0].elements[0].duration.value / 60).toFixed(2);
                            $('#UpdateDistance').val(distance);
                            saveLocation(origin.lat, origin.lng, dest.lat, dest.lng, distance, duration);

                            var distance = distance;
                            $.getJSON("/CustomerPrescription/GetShopCharge", { shopid: shopid, itemTotal: itemTotal, customerid: 0, totalSize: 0, totalWeight: 0, distance: distance }, function (data) {
                                if (data != null) {
                                    $('[name="UpdateDeliveryCharge"]').val(data.GrossDeliveryCharge.toFixed(2));
                                    $('[name="UpdateShopDeliveryDiscount"]').val(data.ShopDeliveryDiscount.toFixed(2));
                                    $('[name="UpdateNetDeliveryCharge"]').val(data.NetDeliveryCharge.toFixed(2));
                                }
                            });

                        });
                    }
                },
                error: function () { alert('Something went wrong, try again later!'); },
            });
        }

        function saveLocation(srclat, srclng, deslat, deslng, dist, dur) {
            var locationValues = {
                SourceLatitude: srclat,
                SourceLontitude: srclng,
                DestinationLatitude: deslat,
                DestinationLontitude: deslng,
                Distance: dist,
                Duration: dur
            };
            $.ajax({
                url: '/Service/SaveLocationDetails',
                type: 'POST',
                dataType: 'json',
                data: locationValues,
                success: function () { },
                error: function () { alert('Something went wrong, try again later!'); },
            });
        }
    </script>
}
